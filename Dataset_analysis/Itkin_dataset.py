# -*- coding: utf-8 -*-
"""Itkin_dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fioBX0ZvWKPP2btJyx-DiVfFTXNoTWO5
"""

# Загрузка нужных библиотек
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px

# Открытие файла
df = pd.read_csv('/content/itkin.csv')
df.head()

# Функция для подсчета количества морфем
def count_slash(morphemic_structure):
    return morphemic_structure.count('/') + 1

# Применение функции к столбцу "morphemic_structure" и добавление результатов в новый столбец "morphema_count"
df['morphema_count'] = df['morphemic_structure'].apply(count_slash)

# Проверка
df.head()

df['morphema_count'].value_counts()

df.query('morphema_count == 7')

# Процентное соотношение
percentages = df['morphema_count'].value_counts(normalize=True) * 100

# Круговая диаграмма
#fig = go.Figure(data=[go.Pie(labels=percentages.index, values=percentages.values, hole=.3, hoverinfo='label+percent')])
fig = go.Figure(data=[go.Pie(labels=percentages.index, values=percentages.values, customdata=percentages.values,
                             hovertemplate='%{label}: %{customdata:.1f}%', textinfo='label+percent', hole=0.3)])

# Заголовок
fig.update_layout(title_text="Распределение количества морфем в процентном соотношении")

# Отображение диаграммы
fig.show()

# Функция для фильтрации статусов
def filter_statuses(statuses):
    filtered_statuses = [status.split(':')[1].strip() for status in statuses.split('/') if len(status.split(':')) > 1 and status.split(':')[1].strip() in {'ROOT', 'SUFF', 'END', 'PREF', 'LINK', 'TM', 'POST'}]
    return filtered_statuses

# Применение фильтрации к каждой морфемной структуре
df['morpheme_statuses'] = df['morphemic_structure'].apply(filter_statuses)
df.head(50)

df['morpheme_statuses'].value_counts()

# Функция для подсчета количества приставок
def count_slash(morphemic_structure):
    return morphemic_structure.count('PREF')

# Применение функции к столбцу "morphemic_structure" и добавление результатов в новый столбец "pref_count"
df['pref_count'] = df['morphemic_structure'].apply(count_slash)

# Проверка
df.head()

df['pref_count'].value_counts()

# Процентное соотношение
percentages = df['pref_count'].value_counts(normalize=True) * 100

# Круговая диаграмма
fig = go.Figure(data=[go.Pie(labels=percentages.index, values=percentages.values, customdata=percentages.values,
                             hovertemplate='%{label}: %{customdata:.1f}%', textinfo='label+percent', hole=0.3)])
# Заголовок
fig.update_layout(title_text="Распределение количества приставок в процентном соотношении")

# Отображение диаграммы
fig.show()

# Функция для подсчета количества корней
def count_slash(morphemic_structure):
    return morphemic_structure.count('ROOT')

# Применяем функцию к столбцу "morphemic_structure" и добавляем результат в новый столбец "root_count"
df['root_count'] = df['morphemic_structure'].apply(count_slash)

df.head()

df['root_count'].value_counts()

# Процентное соотношение
percentages = df['root_count'].value_counts(normalize=True) * 100

# Круговая диаграмма
fig = go.Figure(data=[go.Pie(labels=percentages.index, values=percentages.values, customdata=percentages.values,
                             hovertemplate='%{label}: %{customdata:.1f}%', textinfo='label+percent', hole=0.3)])
# Заголовок
fig.update_layout(title_text="Распределение количества приставок в процентном соотношении")

# Отображение диаграммы
fig.show()

# Функция для подсчета количества суффиксов
def count_slash(morphemic_structure):
    return morphemic_structure.count('SUFF')

# Применение функции к столбцу "morphemic_structure" и добавление результатов в новый столбец "suff_count"
df['suff_count'] = df['morphemic_structure'].apply(count_slash)

df.head()

df['suff_count'].value_counts()

# Процентное соотношение
percentages = df['suff_count'].value_counts(normalize=True) * 100

# Круговая диаграмма
fig = go.Figure(data=[go.Pie(labels=percentages.index, values=percentages.values, customdata=percentages.values,
                             hovertemplate='%{label}: %{customdata:.1f}%', textinfo='label+percent', hole=0.3)])
# Заголовок
fig.update_layout(title_text="Распределение количества приставок в процентном соотношении")

# Отображение диаграммы
fig.show()

# Функция для подсчета количества интерфиксов
def count_slash(morphemic_structure):
    return morphemic_structure.count('LINK')

# Применение функции к столбцу "morphemic_structure" и добавление результатов в новый столбец "link_count"
df['link_count'] = df['morphemic_structure'].apply(count_slash)

df.head()

df['link_count'].value_counts()

# Процентное соотношение
percentages = df['link_count'].value_counts(normalize=True) * 100

# Круговая диаграмма
fig = go.Figure(data=[go.Pie(labels=percentages.index, values=percentages.values, customdata=percentages.values,
                             hovertemplate='%{label}: %{customdata:.1f}%', textinfo='label+percent', hole=0.3)])
# Заголовок
fig.update_layout(title_text="Распределение количества приставок в процентном соотношении")

# Отображение диаграммы
fig.show()

# Функция для подсчета количества флексий
def count_slash(morphemic_structure):
    return morphemic_structure.count('END')

# Применение функции к столбцу "morphemic_structure" и добавление результатов в новый столбец "end_count"
df['end_count'] = df['morphemic_structure'].apply(count_slash)

df.head()

df['end_count'].value_counts()

# Процентное соотношение
percentages = df['end_count'].value_counts(normalize=True) * 100

# Круговая диаграмма
fig = go.Figure(data=[go.Pie(labels=percentages.index, values=percentages.values, customdata=percentages.values,
                             hovertemplate='%{label}: %{customdata:.1f}%', textinfo='label+percent', hole=0.3)])
# Заголовок
#fig.update_layout(title_text="Распределение количества приставок в процентном соотношении")

# Отображение диаграммы
fig.show()

# Функция для подсчета количества тематтических морфем
def count_slash(morphemic_structure):
    return morphemic_structure.count('TM')

# Применяем функцию к столбцу "morphemic_structure" и добавляем результат в новый столбец "tm_count"
df['tm_count'] = df['morphemic_structure'].apply(count_slash)

df.head()

df['tm_count'].value_counts()

# Процентное соотношение
percentages = df['tm_count'].value_counts(normalize=True) * 100

# Круговая диаграмма
fig = go.Figure(data=[go.Pie(labels=percentages.index, values=percentages.values, customdata=percentages.values,
                             hovertemplate='%{label}: %{customdata:.1f}%', textinfo='label+percent', hole=0.3)])
# Заголовок
#fig.update_layout(title_text="Распределение количества приставок в процентном соотношении")

# Отображение диаграммы
fig.show()

df.to_csv('itkin.csv')

# Получение уникальных морфемных структур
unique_morphemic_structures = set()

for structure in df['morphemic_structure']:
    unique_morphemic_structures.update(structure.split('/'))

print("Уникальные морфемные структуры:")
print(unique_morphemic_structures)

# Фильтрация только непустых строк
unique_morphemic_structures = [structure for structure in unique_morphemic_structures if structure]

# Отфильтрованный список
print(unique_morphemic_structures)

vocab_size = len(unique_morphemic_structures)
print("Размер словаря:", vocab_size)

# Датасет с одним столбцом
data = pd.DataFrame({'morphemic_structure': unique_morphemic_structures})

# Вывод датасета
data.head()

# Разделение столбца на два по двоеточию
data[['morphema', 'status']] = data['morphemic_structure'].str.split(':', expand=True)

# Датасет с разделенными столбцами
data.head()

data['status'].value_counts()

# Количество уникальных значений и их частоты в столбце 'status'
status_counts = data['status'].value_counts()

# Построения круговой диаграммы
status_df = pd.DataFrame({'status': status_counts.index, 'count': status_counts.values})
fig = px.pie(status_df, values='count', names='status')
fig.show()